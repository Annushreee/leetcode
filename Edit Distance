Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.

You have the following three operations permitted on a word:

Insert a character
Delete a character
Replace a character
 

Example 1:

Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')

SOLUTION:
class Solution {
    int [][] dp;
    public int minDistance(String word1, String word2) {
        dp=new int [word1.length()+1][word2.length()+1];
        for(int i=0;i<dp.length;i++){
            for(int j=0;j<dp[0].length;j++){
                dp[i][j]=-1;
            }
        }
        return solve(word1.length() - 1, word2.length() - 1, word1, word2); 
    }

    public int solve(int index1, int index2, String word1, String word2) {
        if (index1 < 0) {
            return index2 + 1;
        }
        if (index2 < 0) {
            return index1 + 1;
        }
        if(dp[index1][index2]!=-1){
            return dp[index1][index2];
        }
       
        if (word1.charAt(index1) == word2.charAt(index2)) {
            return dp[index1][index2]=solve(index1 - 1, index2 - 1, word1, word2);
        } else {
            return dp[index1][index2]=Math.min(1 + solve(index1 - 1, index2 - 1, word1, word2),
                            Math.min(1 + solve(index1, index2 - 1, word1, word2), 
                                     1 + solve(index1 - 1, index2, word1, word2)));
        }
    }
}
